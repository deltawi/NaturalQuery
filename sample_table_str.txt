
CREATE TABLE companies (
company_id SERIAL PRIMARY KEY,
company_name VARCHAR(255) -- company_id is the company unique ID
)

CREATE TABLE stores (
company_id integer, -- foreign key referencing companies.company_id
store_id VARCHAR(255) PRIMARY KEY, -- store_id is the store unique ID
store_name VARCHAR(255), -- name of the store
address text, -- address of the store
phone_number VARCHAR(20) -- phone number of the store
)

CREATE TABLE categories (
category_id VARCHAR(255) PRIMARY KEY, -- category_id is the category unique ID
category_name_en VARCHAR(255) -- name of the category in English
)

CREATE TABLE products (
product_id VARCHAR(255) PRIMARY KEY, -- product_id is the product unique ID
article_id VARCHAR(255), -- article number of the product
product_name_en VARCHAR(255), -- name of the product in English
uom VARCHAR(50), -- unit of measurement for the product
buom VARCHAR(50), -- bought quantity of the product
category_id VARCHAR(255), -- foreign key referencing categories.category_id
brand VARCHAR(255), -- brand of the product
gtin VARCHAR(255), -- global trade item number of the product
varient_en VARCHAR(255) -- variant of the product in English
)

CREATE TABLE inventory (
inventory_id SERIAL PRIMARY KEY, -- inventory_id is the inventory unique ID
current_stock integer, -- current stock of the product
last_updated TIMESTAMP DEFAULT (now() AT TIME ZONE 'UTC'::text), -- last updated date and time of the inventory
store_id VARCHAR(255), -- foreign key referencing stores.store_id
product_id VARCHAR(255), -- foreign key referencing products.product_id
)

CREATE TABLE restocks (
restock_id SERIAL PRIMARY KEY, -- restock_id is the restock unique ID
inventory_id integer, -- foreign key referencing inventory.inventory_id
restocked_quantity integer, -- quantity of the product restocked
restock_date TIMESTORM DEFAULT (now() AT TIME ZONE 'UTC'::text), -- date and time of the restock
)

CREATE TABLE transactions (
transaction_id SERIAL PRIMARY KEY, -- transaction_id is the transaction unique ID
inventory_id integer, -- foreign key referencing inventory.inventory_id
date TIMESTAMP DEFAULT (now() AT TIME ZONE 'UTC'::text), -- date of the transaction
quantity_sold integer, -- quantity of the product sold
price double precision, -- price of the product sold
discount double precision, -- discount percentage of the product sold
tax double precision, -- tax percentage of the product sold
)

CREATE TABLE productdemandforecast (
forecast_id SERIAL PRIMARY KEY, -- forecast_id is the forecast unique ID
forecast_date date, -- date of the forecast
forecasted_demand integer, -- forecasted demand of the product
product_id VARCHAR(255), -- foreign key referencing products.product_id
)

-- stores.company_id can be joined with companies.company_id
-- products.category_id can be joined with categories.category_id
-- inventory.store_id can be joined with stores.store_id
-- inventory.product_id can be joined with products.product_id
-- restocks.inventory_id can be joined with inventory.inventory_id
-- transactions.inventory_id can be joined with inventory.inventory_id
-- productdemandforecast.product_id can be joined with products.product_id
