CREATE TABLE suppliers (
supplierid SERIAL PRIMARY KEY,
suppliername VARCHAR(100),
contactname VARCHAR(100),
address VARCHAR(255),
city VARCHAR(50),
country VARCHAR(50),
phone VARCHAR(15),
email VARCHAR(100)
)

CREATE TABLE products (
categoryid integer,
unitprice numeric,
stockquantity integer DEFAULT 0,
supplierid integer,
productid SERIAL PRIMARY KEY,
productname VARCHAR(100),
description text
)

CREATE TABLE categories (
categoryid SERIAL PRIMARY KEY,
categoryname VARCHAR(50),
description text
)

CREATE TABLE customers (
customerid SERIAL PRIMARY KEY,
registrationdate timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
lastname VARCHAR(50),
email VARCHAR(100),
phone VARCHAR(15),
address VARCHAR(255),
city VARCHAR(50),
country VARCHAR(50),
firstname VARCHAR(50)
)

CREATE TABLE orders (
orderid SERIAL PRIMARY KEY,
customerid integer,
orderdate timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
totalamount numeric,
shippingaddress VARCHAR(255),
orderstatus VARCHAR(50) DEFAULT 'Processing'::character varying
)

CREATE TABLE orderdetails (
orderdetailid SERIAL PRIMARY KEY,
orderid integer,
productid integer,
quantity integer,
unitprice numeric
)

CREATE TABLE payments (
paymentid SERIAL PRIMARY KEY,
orderid integer,
paymentdate timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
amount numeric,
paymentmethod VARCHAR(50)
)

CREATE TABLE customerfeedback (
feedbackid SERIAL PRIMARY KEY,
customerid integer,
productid integer,
rating integer,
feedbackdate timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
comment text
)

-- products.categoryid can be joined with categories.categoryid
-- products.supplierid can be joined with suppliers.supplierid
-- orders.customerid can be joined with customers.customerid
-- orderdetails.orderid can be joined with orders.orderid
-- orderdetails.productid can be joined with products.productid
-- payments.orderid can be joined with orders.orderid
-- customerfeedback.customerid can be joined with customers.customerid
-- customerfeedback.productid can be joined with products.productid